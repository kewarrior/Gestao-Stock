@page "/carrinho"
@using Client.Services
@using global::Shared.Models

@inject CarrinhoService CarrinhoService
@inject HttpClient httpClient

<h2 class="text-center mt-4">🛒 Carrinho de Compras</h2>

<div class="container mt-5">
    @if (Carros.Count == 0)
    {
        <div class="text-center">
            <h4 class="text-muted">Seu carrinho está vazio! 🛍️</h4>
            <p>Adicione produtos para começar a comprar.</p>
            <a href="/produtos" class="btn btn-primary">Explorar Produtos</a>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (Carro c in Carros)
            {
                <div class="col-md-4 mb-4" >
                    <div class="card shadow-sm">
                        <img src="@c.Imagem" class="w-50" alt="@c.Nome" style="height: 200px; object-fit: cover;">
                        <div class="card-body">
                            <h5 class="card-title">@c.Nome</h5>
                            <p class="card-text">Preço: <strong>@c.Preco.ToString("C")</strong></p>
                            <p class="card-text">Quantidade: <strong>@c.Quantidade</strong></p>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoverProduto(c)">Remover</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="row mt-4">
            <div class="col-md-6">
                <h4>Resumo do Pedido</h4>
                <p><strong>Valor Total (com IVA):</strong> @Total().ToString("C")</p>
                <p><strong>Valor Total (sem IVA):</strong> @sIva().ToString("C")</p>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-success btn-lg" @onclick="FinalizarCompra">Finalizar Compra</button>
            </div>
        </div>
    }
</div>

<p class="text-center text-danger mt-4">@msg</p>

@code {
    private List<Carro> Carros = new();
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        await ConsultarCarrinho();
    }

    private async Task ConsultarCarrinho()
    {
        string api = "api/produtos/ConsultarCarrinho";
        HttpResponseMessage responseMessage = await httpClient.GetAsync(api);
        if (responseMessage.IsSuccessStatusCode)
        {
            Carros = await responseMessage.Content.ReadFromJsonAsync<List<Carro>>();
        }
        else
        {
            Carros = new List<Carro>();
            msg = await responseMessage.Content.ReadAsStringAsync();
        }
    }

    private async Task RemoverProduto(Carro carro)
    {
        if (carro == null)
        {
            msg = "Produto inválido para remoção.";
            return;
        }

        string api = $"api/produtos/ApagarCarrinho/{carro.Id}";
        try
        {
            HttpResponseMessage response = await httpClient.DeleteAsync(api);
            if (response.IsSuccessStatusCode)
            {
                msg = await response.Content.ReadAsStringAsync();
                await ConsultarCarrinho();
            }
            else
            {
                msg = $"Erro ao remover o produto: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            msg = $"Erro inesperado: {ex.Message}";
        }
    }

    private double Total()
    {
        return Carros.Sum(carro => carro.Preco * carro.Quantidade * 1.23);
    }

    private double sIva()
    {
        return Carros.Sum(carro => carro.Preco * carro.Quantidade);
    }

    private void FinalizarCompra()
    {
        msg = "Compra finalizada com sucesso! Obrigado por comprar conosco. 🎉";
        Carros.Clear();
    }
}
