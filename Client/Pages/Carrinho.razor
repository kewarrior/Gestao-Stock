@page "/carrinho"
@using Client.Services
@using global::Shared.Models

@inject CarrinhoService CarrinhoService
@inject HttpClient httpClient

<h2>Carrinho de Compras</h2>

<div class="p-3">
	<table class="table text-center">
		<tr>
			<td class="border-1">Id</td>
			<td class="border-1">Nome do Produto</td>
			<td class="border-1">Preço</td>
			<td class="border-1">Quantidade</td>
			<td class="border-1">Ações</td>
		</tr>

		@foreach (Carro c in Carros)
		{
			<tr>
				<td class="border-1">@c.Id</td>
				<td class="border-1">@c.Nome</td>
				<td class="border-1">@c.Preco.ToString("C")</td>
				<td class="border-1">@c.Quantidade</td>
				<td>
					<button class="btn btn-outline-danger" @onclick="() => RemoverProduto(c)">Remover</button>
				</td>
			</tr>
		}
	</table>
</div>

<div class="d-flex d-xl-inline-flex">
	<p class="p-2"><strong>Valor total com Iva:</strong> @Total().ToString("C")</p>
	<p class="p-2"><strong>Valor total sem Iva</strong> @sIva().ToString("C")</p>
	<button class="btn btn-primary" style="width:auto; height:30px; padding:3px 2px;">Finalizar Compra</button>

</div>



<p class="text-center p-3 text-danger border-1">@msg</p>

@code {
	private List<Produto>? produtos = new();
	private List<Carro> Carros = new();

	string msg = "";



	protected override async Task OnInitializedAsync()
	{
		await ConsultarCarrinho();
	}

	private async Task ConsultarCarrinho()
	{
		string api = "api/produtos/ConsultarCarrinho";
		HttpResponseMessage responseMessage = await httpClient.GetAsync(api);
		if (responseMessage.IsSuccessStatusCode)
		{
			Carros = await responseMessage.Content.ReadFromJsonAsync<List<Carro>>();
		}
		else
		{
			Carros = new List<Carro>(); // Garante que a lista seja limpa se o carrinho estiver vazio
			msg = await responseMessage.Content.ReadAsStringAsync();
		}

		StateHasChanged(); // Força a atualização da interface
	}


	protected async Task RemoverProduto(Carro carro)
	{
		if (carro == null)
		{
			msg = "Produto inválido para remoção.";
			return;
		}

		string api = $"api/produtos/ApagarCarrinho/{carro.Id}";
		try
		{
			HttpResponseMessage response = await httpClient.DeleteAsync(api);
			if (response.IsSuccessStatusCode)
			{
				msg = await response.Content.ReadAsStringAsync();
				await ConsultarCarrinho();
			}
			else
			{
				msg = $"Erro ao remover o produto: {await response.Content.ReadAsStringAsync()}";
			}
		}
		catch (Exception ex)
		{
			msg = $"Erro inesperado: {ex.Message}";
		}
	}

	private double Total()
	{
		double total = 0;
		double soma = 0;
		double cIva = 0;
		double iva = 0.23;

		foreach (var carro in Carros)
		{
			soma += carro.Preco * carro.Quantidade;
			cIva = soma * iva;
			total = soma + cIva;
		}
        return total;
    }
	

	private double sIva()
	{
		double total = 0;

		foreach(var carro in Carros)
		{
			total += carro.Preco * carro.Quantidade;
		}
		return total;
	}

}
