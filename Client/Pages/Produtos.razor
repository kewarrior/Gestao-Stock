@page "/produtos"
@using Client.Services

@using global::Shared.Models

@inject CarrinhoService CarrinhoService
@inject HttpClient httpClient

<h3>Produtos</h3>


<div class="p-3">
    <table class="table text-center">
        <tr>
            <td class="border-1">Nome</td>
            <td class="border-1">Preco</td>
            <td class="border-1">Quantiadade</td>
            <td class="border-1">Comprar</td>
        </tr>

        @foreach (Produto p in produtos)
        {
            <tr>
                <td class="border-1">@p.Nome</td>
                <td class="border-1">@p.Preco €</td>
                <td class="border-1">@p.Quantidade Unidades</td>
                <td>
                    <button class="btn btn-outline-success" @onclick="() => CarrinhoService.AdicionarProduto(p)">Adicionar ao Carrinho</button>
                </td>
            </tr>
        }

    </table>
</div>

<div>
    <p class="text-center p-3 text-danger"> @msg </p>
</div>

@code {


    private List<Produto>? produtos = new(); 
    private string msg = "";
    string palavra = "";

    protected override async Task OnInitializedAsync()
    {
        await Carregar();
        msg = "Produtos carregados com sucesso!";
    }

    protected async Task Carregar()
    {
        string api = "/api/Produtos/Consultar";

        if (!string.IsNullOrEmpty(palavra))
        {
            api = $"/api/Produtos/Consultar?nome={palavra}";
        }


        HttpResponseMessage response = await httpClient.GetAsync(api);

        if (response.IsSuccessStatusCode)
        {
            produtos = await response.Content.ReadFromJsonAsync<List<Produto>>();


        }
        else
        {
            msg = await response.Content.ReadAsStringAsync();
        }

    }

    private async Task AdicionarProduto(Produto p)
    {
        CarrinhoService.AdicionarProduto(p);
		msg = "Produto adicionado ao carrinho com sucesso!";
		StateHasChanged();
    }
}

